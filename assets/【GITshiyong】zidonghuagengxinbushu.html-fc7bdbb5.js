import{_ as p,p as i,q as o,s as n,G as s,t as e,J as t,n as c}from"./framework-631c3516.js";const l={},u=t(`<p>​--- title: 【GIT使用】自动化更新部署 date: 2023/03/08 tags:</p><ul><li>GIT categories:</li><li>学习 ​---</li></ul><h1 id="github-actions配合github-pages实现项目自动化打包更新部署" tabindex="-1"><a class="header-anchor" href="#github-actions配合github-pages实现项目自动化打包更新部署" aria-hidden="true">#</a> Github Actions配合Github Pages实现项目自动化打包更新部署</h1><p>首先，我想用这个是因为要搭一个博客，用的vuepress-reco这个模板，基于vuepress的嘛大家用的挺多的，非常方便就搭建好了，ok，打包部署到我的云服务器上，到这里都很顺利。但是vuepress毕竟还是个静态网站生成器，那我每次写一个md要放进去还得重新打包一次部署一次啊，多麻烦啊，但当时我还不知道github actions这个好东西，我就有了下面这个奇葩的思路：</p><p>我先搞了个写md的页面，写完点击保存就调用后台接口，把文件存在服务器上项目对应的文件夹中，然后调用一个bat命令在服务器上进行打包，等打包完就行了。我在本地测的还挺成功的，不过在服务器上打包老是失败，很无语，我甚至还尝试了直接运行项目。。虽然成功了，但是在云服务器上搞这些不合适。。。</p><p>后来我发现了这个东西，心想这不是和我的思路差不多吗，于是就找教程试了试。</p><h2 id="新建一个repository" tabindex="-1"><a class="header-anchor" href="#新建一个repository" aria-hidden="true">#</a> 新建一个repository</h2><p>用来存放项目，注意一定要public，不然后面开启pages的时候就不行了。</p><p><img src="https://raw.githubusercontent.com/gaopengbin/PicRepo/main/20230308155000.png" alt=""></p><h2 id="新建一个workflow" tabindex="-1"><a class="header-anchor" href="#新建一个workflow" aria-hidden="true">#</a> 新建一个Workflow</h2><p>就是告诉github在你的项目提交更新后，它要做些什么，这里有很多模板，我就想要一个能打包部署的。</p><p><img src="https://raw.githubusercontent.com/gaopengbin/PicRepo/main/20230308155722.png" alt=""></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> CI Github Pages
<span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token comment">#监听push操作</span>
  <span class="token key atrule">push</span><span class="token punctuation">:</span>
    <span class="token key atrule">branches</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> main <span class="token comment"># 这里只配置了main分支，所以只有推送main分支才会触发以下任务</span>
<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token comment"># 任务ID</span>
  <span class="token key atrule">build-and-deploy</span><span class="token punctuation">:</span>
    <span class="token comment"># 运行环境</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
    <span class="token comment"># 步骤</span>
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token comment"># 官方action，将代码拉取到虚拟机</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout  ️ 
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v3

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install and Build   <span class="token comment"># 安装依赖、打包，如果提前已打包好无需这一步</span>
        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
          npm install
          npm run build</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Copy to root   <span class="token comment"># 将打包好的文件复制到docs目录，这里是为了方便部署，如果不需要可以删除</span>
        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
          cp -r .vuepress/dist/* docs/1</span>

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy   <span class="token comment"># 部署到gh-pages分支</span>
        <span class="token key atrule">uses</span><span class="token punctuation">:</span>
          peaceiris/actions<span class="token punctuation">-</span>gh<span class="token punctuation">-</span>pages@v3
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">github_token</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.ACCESS_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>
          <span class="token key atrule">publish_dir</span><span class="token punctuation">:</span> ./docs/1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),r={href:"https://github.com/settings/tokens",target:"_blank",rel:"noopener noreferrer"},d=t('<p><img src="https://raw.githubusercontent.com/gaopengbin/PicRepo/main/20230308161557.png" alt=""></p><p>再回到项目的Setting中，把刚创建的token放进来，这里的Name和yml配置中github_token里面对应的。</p><p><img src="https://raw.githubusercontent.com/gaopengbin/PicRepo/main/20230308161920.png" alt=""></p><h2 id="开启gh-pages" tabindex="-1"><a class="header-anchor" href="#开启gh-pages" aria-hidden="true">#</a> 开启gh-pages</h2><p><img src="https://raw.githubusercontent.com/gaopengbin/PicRepo/main/20230308162252.png" alt=""></p><p>把这里配置一下就可以了，刷新页面就会显示你的pages访问地址，这个gh-pages分支是在执行上面的workflow的最后一个步骤时创建并推送的，至此，就可以访问到部署的项目了。</p><h2 id="push一下试试" tabindex="-1"><a class="header-anchor" href="#push一下试试" aria-hidden="true">#</a> push一下试试</h2><p>在本地push之后，就可以看到actions在执行了，包括每一步的执行情况，如果没有错误，执行成功后就是绿色的对钩，再去访问一下部署的页面就可以看到更新后的网页了。</p><p><img src="https://raw.githubusercontent.com/gaopengbin/PicRepo/main/20230308163230.png" alt=""></p>',9),k={href:"https://gaopengbin.github.io/blog/",target:"_blank",rel:"noopener noreferrer"};function m(h,g){const a=c("ExternalLinkIcon");return i(),o("div",null,[u,n("p",null,[s("这里用到了github token，在"),n("a",r,[s("Personal Access Tokens (Classic) (github.com)"),e(a)]),s("这里生成，点击Generate new token，勾选上这些选项就可以点击生成了，这个token只会给你展示一次，复制下来自己存好。")]),d,n("p",null,[n("a",k,[s("laogao (gaopengbin.github.io)"),e(a)])])])}const v=p(l,[["render",m],["__file","【GITshiyong】zidonghuagengxinbushu.html.vue"]]);export{v as default};
